"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const rollup_1 = require("rollup");
const rollup_plugin_node_resolve_1 = tslib_1.__importDefault(require("rollup-plugin-node-resolve"));
const rollup_plugin_babel_1 = tslib_1.__importDefault(require("rollup-plugin-babel"));
const rollup_plugin_commonjs_1 = tslib_1.__importDefault(require("rollup-plugin-commonjs"));
const rollup_plugin_node_builtins_1 = tslib_1.__importDefault(require("rollup-plugin-node-builtins"));
const rollup_plugin_node_globals_1 = tslib_1.__importDefault(require("rollup-plugin-node-globals"));
const rollup_plugin_json_1 = tslib_1.__importDefault(require("rollup-plugin-json"));
const utils_1 = require("./utils");
class MaxJSCompiler {
    constructor({ filepath }) {
        this.bundler = null;
        this.filepath = filepath;
    }
    get directoy() {
        return path_1.dirname(this.filepath);
    }
    get filename() {
        return path_1.basename(this.filepath);
    }
    get extension() {
        return path_1.extname(this.filename);
    }
    async setup() {
        // only setup once
        if (this.bundler)
            return;
        if (!(await utils_1.isFile(this.filepath)))
            throw new Error(`File ${this.filepath} does not exist or is not a file.`);
        this.bundler = await rollup_1.rollup({
            input: this.filepath,
            plugins: [
                rollup_plugin_node_resolve_1.default({
                    browser: true
                }),
                rollup_plugin_commonjs_1.default({
                    sourceMap: false
                }),
                rollup_plugin_json_1.default({}),
                rollup_plugin_node_builtins_1.default(),
                rollup_plugin_node_globals_1.default(),
                rollup_plugin_babel_1.default({
                    babelrc: false,
                    exclude: "node_modules/**",
                    externalHelpers: false,
                    runtimeHelpers: true,
                    plugins: [
                        [
                            "@babel/plugin-transform-runtime",
                            {
                                "absoluteRuntime": true,
                                "corejs": 2,
                                "helpers": true,
                                "regenerator": true,
                                "useESModules": true
                            }
                        ]
                    ],
                    presets: [
                        [
                            "@babel/preset-env",
                            {
                                "useBuiltIns": "usage"
                            }
                        ]
                    ]
                })
            ],
            treeshake: false
        });
    }
    async output() {
        if (!this.bundler)
            throw new Error("Compiler has not been setup yet.");
        const { output } = await this.bundler.generate({
            banner: MaxJSCompiler.banner,
            compact: false,
            format: "c74max",
            strict: false
        });
        if (output.length === 0)
            throw new Error("No output chunk generated");
        const outputChunk = output.shift();
        return outputChunk && outputChunk.code ? outputChunk.code : "";
    }
}
MaxJSCompiler.banner = `
/**
 * This file has been auto-generated in order to prepare external projects using NPM dependencies etc
 * for usage in the [js] and [jsui] object in Max MSP. Any manual changes might be overwritten when regenerating this
 * file. In case you'd like to learn more, report issues etc - pleaser refer to the Project on GitHub:
 *
 * https://github.com/fde31/max-js-bundler
 *
 */`;
exports.MaxJSCompiler = MaxJSCompiler;
